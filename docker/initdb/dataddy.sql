/*
 Navicat MySQL Data Transfer

 Source Server         : docker-mysql-5.7
 Source Server Type    : MySQL
 Source Server Version : 50731
 Source Host           : localhost:3306
 Source Schema         : dataddy

 Target Server Type    : MySQL
 Target Server Version : 50731
 File Encoding         : 65001

 Date: 13/08/2024 15:29:39
*/

-- -- 创建数据库（如果不存在）
-- CREATE DATABASE IF NOT EXISTS dataddy;

-- -- 切换到新创建的数据库
-- USE dataddy;

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config
-- ----------------------------
DROP TABLE IF EXISTS `config`;
CREATE TABLE `config` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `namespace` varchar(50) NOT NULL,
  `name` varchar(50) NOT NULL,
  `value` text,
  `remark` varchar(250) NOT NULL DEFAULT '',
  `last_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `namespace` (`namespace`,`name`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COMMENT='配置表';

-- ----------------------------
-- Records of config
-- ----------------------------
BEGIN;
INSERT INTO `config` VALUES (1, 'system', 'macro', '{\n	\"income\" : \"dataddy.test_income_report\",\n	\"obj\": \"dataddy.test_obj\"\n}', '宏配置,在报表界面写的sql语句里面可使用这里的宏变量', '2017-07-25 02:54:14');
INSERT INTO `config` VALUES (2, 'system', 'data_rule', '{\n	\"sum\" : {\n		\"ignore\" : \"(?:[^a-z]ID|CTR|CPM|CPC|率)|(^客户|广告位|投放|媒体|应用$)\",\n		\"fields\" : {\n			\"请求CTR\" : \"round({点击}/{请求}*100, 4)\"\n		}\n	}\n}', '数据统计规则，比如下面的配置：对报表数据做总计操作时候会忽略掉“ignore”正则配置的字段，“fields”配置的是报表包含这个字段的时候做sum操作的计算规则', '2017-07-25 09:37:42');
INSERT INTO `config` VALUES (3, 'system', 'system', '{\n	\"site_name\" : \"这是网站名称\",\n	\"copyright\" : \"这是网站备案域名\"\n}', '系统配置', '2017-07-25 09:40:20');
INSERT INTO `config` VALUES (4, 'system', 'jstree', '11', '目录树版本', '2024-04-19 09:30:43');
COMMIT;

-- ----------------------------
-- Table structure for dashboard
-- ----------------------------
DROP TABLE IF EXISTS `dashboard`;
CREATE TABLE `dashboard` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL DEFAULT '',
  `uid` int(11) NOT NULL DEFAULT '0',
  `config` text,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of dashboard
-- ----------------------------
BEGIN;
INSERT INTO `dashboard` VALUES (1, '我的Dashboard', 1, '{\"layout\":[]}', '2024-04-17 02:47:46', '2024-01-26 08:25:43');
COMMIT;

-- ----------------------------
-- Table structure for data_version
-- ----------------------------
DROP TABLE IF EXISTS `data_version`;
CREATE TABLE `data_version` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `version_id` varchar(50) DEFAULT NULL,
  `db_name` varchar(50) NOT NULL,
  `table_name` varchar(50) NOT NULL,
  `pk` int(11) NOT NULL,
  `data` text,
  `modify_fields` varchar(100) NOT NULL DEFAULT '',
  `user_id` int(11) NOT NULL DEFAULT '0',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `version_id` (`version_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='数据变更记录';

-- ----------------------------
-- Table structure for dsn
-- ----------------------------
DROP TABLE IF EXISTS `dsn`;
CREATE TABLE `dsn` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL,
  `remark` varchar(250) NOT NULL DEFAULT '',
  `dsn` varchar(500) NOT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modify_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `create_account` varchar(32) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT='数据源';

-- ----------------------------
-- Records of dsn
-- ----------------------------
BEGIN;
INSERT INTO `dsn` VALUES (1, 'default', '默认', '854a63f87edc0ece097b29c98ccc6942ae20914efe40edbe165d3fbb04a15f2fbbd9d257408728e219b4695c657b568f', '2024-01-26 07:50:59', '2024-01-26 07:50:59', 'admin');
COMMIT;

-- ----------------------------
-- Table structure for menuitem
-- ----------------------------
DROP TABLE IF EXISTS `menuitem`;
CREATE TABLE `menuitem` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL COMMENT 'title',
  `type` enum('alarm','report','link','folder') NOT NULL DEFAULT 'report',
  `uri` varchar(256) NOT NULL DEFAULT '' COMMENT 'uri',
  `content_type` enum('sql','html','json','none') NOT NULL DEFAULT 'none',
  `dev_uid` int(11) NOT NULL DEFAULT '0' COMMENT '开发者UID',
  `dev_content` text COMMENT '开发版内容',
  `dev_safe_code` tinyint(4) NOT NULL DEFAULT '0',
  `dev_version_time` timestamp NULL DEFAULT NULL COMMENT '开发版本时间',
  `content` text COMMENT '发布版内容',
  `safe_code` tinyint(4) NOT NULL DEFAULT '0',
  `release_version_time` timestamp NULL DEFAULT NULL COMMENT '已发布的版本时间',
  `dsn` varchar(250) NOT NULL DEFAULT 'default' COMMENT '数据库连接',
  `desc` text COMMENT '说明',
  `crontab` varchar(250) NOT NULL DEFAULT '' COMMENT '定时任务设置',
  `mail_title` varchar(250) NOT NULL DEFAULT '',
  `mail_receiver` text COMMENT '邮件发送对象',
  `mail_memo` text COMMENT '邮件备注',
  `settings` text COMMENT '其他配置信息',
  `disabled` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否禁用',
  `visiable` tinyint(4) NOT NULL DEFAULT '1' COMMENT '普通用户是否可见',
  `parent_id` int(11) NOT NULL DEFAULT '0' COMMENT '父级节点',
  `create_account` varchar(32) NOT NULL DEFAULT '' COMMENT '创建用户',
  `sort` smallint(6) NOT NULL DEFAULT '0',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'sql创建时间',
  `modify_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COMMENT='菜单项';

-- ----------------------------
-- Records of menuitem
-- ----------------------------
BEGIN;
INSERT INTO `menuitem` VALUES (1, '开发文档', 'folder', '', 'none', 0, NULL, 0, NULL, '', 0, NULL, 'default', '', '', '', '', '', '{\"icon\":\"icon-docs\"}', 0, 1, 0, '', 94, '2024-01-26 07:50:59', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (2, '函数说明', 'report', '', 'none', 1, '#!markdown\n\n内嵌PHP是在沙盒中执行，只允许调用白名单中的函数。\n白名单设置规则：\n\n1. 指定的系统函数,下列的系统函数列表\n2. 所有_array_,_str_,_url_,_ddy_为前缀的函数，框架内置函数主要为_ddy_前缀函数，在后面详细说明；应用自定义的函数，也基本以_ddy_做为前缀。\n\n## 系统函数\n\n- [`print`](http://php.net/manual/en/function.print.php) \n- [`var_dump`](http://php.net/manual/en/function.var-dump.php)\n- [`json_encode`](http://php.net/manual/en/function.json-encode.php)\n- [`json_decode`](http://php.net/manual/en/function.json-decode.php)\n- [`count`](http://php.net/manual/en/function.count.php)\n- [`array`](http://php.net/manual/en/function.array.php)\n- [`sizeof`](http://php.net/manual/en/function.sizeof.php)\n- [`is_array`](http://php.net/manual/en/function.is-array.php)\n- [`is_bool`](http://php.net/manual/en/function.is-bool.php)\n- [`is_numeric`](http://php.net/manual/en/function.is-numeric.php)\n- [`is_string`](http://php.net/manual/en/function.is-string.php)\n- [`trim`](http://php.net/manual/en/function.trim.php)\n- [`date`](http://php.net/manual/en/function.date.php)\n- [`time`](http://php.net/manual/en/function.time.php)\n- [`strtotime`](http://php.net/manual/en/function.strtotime.php)\n- [`printf`](http://php.net/manual/en/function.printf.php)\n- [`sprintf`](http://php.net/manual/en/function.sprintf.php)\n- [`number_format`](http://php.net/manual/en/function.number-format.php)\n- [`implode`](http://php.net/manual/en/function.implode.php)\n- [`explode`](http://php.net/manual/en/function.explode.php)\n- [`substr`](http://php.net/manual/en/function.substr.php)\n- [`preg_match`](http://php.net/manual/en/function.preg-match.php)\n- [`preg_match_all`](http://php.net/manual/en/function.preg-match-all.php)\n- [`preg_split`](http://php.net/manual/en/function.preg-split.php)\n- [`preg_replace`](http://php.net/manual/en/function.preg-replace.php)\n- [`parse_url`](http://php.net/manual/en/function.parse-url.php)\n- [`parse_str`](http://php.net/manual/en/function.parse-str.php)\n- [`http_build_query`](http://php.net/manual/en/function.http-build-query.php)\n- [`round`](http://php.net/manual/en/function.round.php)\n- [`intval`](http://php.net/manual/en/function.intval.php)\n- [`ceil`](http://php.net/manual/en/function.ceil.php)\n- [`floor`](http://php.net/manual/en/function.floor.php)\n- [`rand`](http://php.net/manual/en/function.rand.php)\n- [`abs`](http://php.net/manual/en/function.abs.php)\n- [`usort`](http://php.net/manual/en/function.usort.php)\n- [`uasort`](http://php.net/manual/en/function.uasort.php)\n- [`uksort`](http://php.net/manual/en/function.uksort.php)\n- [`sort`](http://php.net/manual/en/function.sort.php)\n- [`asort`](http://php.net/manual/en/function.asort.php)\n- [`ksort`](http://php.net/manual/en/function.ksort.php)\n- [`min`](http://php.net/manual/en/function.min.php)\n- [`max`](http://php.net/manual/en/function.max.php)\n- [`extract`](http://php.net/manual/en/function.extract.php)\n- [`in_array`](http://php.net/manual/en/function.in-array.php)\n\n\n## dataddy内置函数\n\n### `void ddy_hello()`\n> 打印 Hello,world!\n\n---\n\n### `\\GG\\Db\\GlobalDb ddy_db(string $dsn)`\n> 获取DB对象，一般不直接调用该函数；使用ddy_model\n\n**参数**\n\n`$dsn`  数据源ID，在DSN管理中配置的DSN的引用名称\n\n---\n\n### `\\GG\\Db\\Model\\Base ddy_model(string $table, string $dsn = \'default\')`\n> 获取Model对象，进行数据库操作\n\n**参数**\n\n`$table`  表名\n\n`$dsn`    数据源名称\n\n---\n\n### `void ddy_macro(string $name, string $value, bool $quote = TRUE)`\n> 设置模板宏\n\n**参数**\n\n`$name`     宏名称\n\n`$value`	宏值\n\n`$quote`	宏值在引用时，是否使用引号引起\n\n---\n\n### `mixed ddy_data(string $name, mixed $default = NULL)`\n> 获取页面查询条件的值\n\n---\n\n### `number ddy_math_exp(string $exp)`\n> 执行一个算术表达式字符串，返回其计算结果。（沙盒环境，不允许调用`eval`函数）\n\n---\n\n### `void ddy_set_page_data(mixed $data, string $name = \'default\')`\n> 非SQL类型报表，可以通过PHP直接将数据结果集，设置给页面。\n\n`$name` 为数据的名称, **default** 为报表数据\n\n报表数据结果集的格式约定：\n\n```\nddy_set_page_data([\n	\"report1\" => [  # report1为report id\n		\"rows\" => [ # report的数据\n			[ \"列1\" => \"值11\", \"列2\" => \"值13\" ],\n			[ \"列1\" => \"值21\", \"列2\" => \"值23\" ],\n			[ \"列1\" => \"值31\", \"列2\" => \"值33\" ],\n		]\n	],\n	\"report2\" => [\n		\"rows\" => [\n			[ \"列1\" => \"值11\", \"列2\" => \"值13\" ],\n			[ \"列1\" => \"值21\", \"列2\" => \"值23\" ],\n			[ \"列1\" => \"值31\", \"列2\" => \"值33\" ],\n		]\n	],\n]);\n```\n\n---\n\n### `mixed ddy_get_page_data(string $name = \'default\')`\n> 获取页面的数据\n\n### `void ddy_set_table_options(string $report_id, array $options)`\n> 设置数据表的选项，如果报表的设置框里已有该report\\_id的静态配置，则会合并，覆盖重叠的key配置。\n\n### `void ddy_set_chart_options(string $chart_id, mixed $options)`\n> 设置图表的选项，`$options`可以是完整的amchart的相关配置，也可以简化的数据列名称的配置\n\n### `void ddy_set_options(mixed $options, string $name = \'default\')` \n> 设置通用选项，可以视为报表与框架引擎间的一种传递数据的方式。当`$name`为default时，设置全局报表配置。\n\n### `mixed ddy_json_decode(string $json, mixed $default = [])`\n> 封装的json\\_decode函数， 支持包含注释的json字符串；支持设置默认值。\n\n### `void ddy_view_filter()`\n> 输出定义的查询控件HTML\n\n### `void ddy_register_form_handler(string $report_id, callable $handler = NULL)`\n> 定义可编辑报表的表单处理句柄\n\n**参数**\n\n`$report_id`  可编辑报表的报表ID\n\n`$handler`	  表单处理句柄, `function(&$error, $row_id, $data)`\n\n**示例**\n```\n# df_start\nddy_set_table_options(0, [\n	\'fields\' => [\n		\'city\' => [ \'class\' => \'text-success\' ]\n	],\n	\'edit\' => [\n		\'pk\' => \'0\', # 指定主键列，数字视为索引，可以直接写列的展现名称（officeCode)。如果有多列联合主键，可以指定一个数据：[ \'列a\', \'列b\' ]；默认为第一列；如果主键列有属性eid，则主键值优先取该属性的值\n		\'columns\' => [\n			//可编辑的列名\n			\'国家\' => [\n				\'type\' =>  \"select\",  # 类型，目前仅 select 和 text ，默认为text\n				#\'rule\' => \'numeric\', # 字段校验规则，\n				\'name\' => \'country\',  # 字段名，默认为列名\n				\'options\' => [        # select的选项\n					[ \"label\" => \"美国\", \"value\" => \"USA\" ],\n                    [ \"label\" => \"中国\", \"value\" => \"China\" ],\n                    [ \"label\" => \"日本\", \"value\" => \"Janpan\" ],\n                    [ \"label\" => \"法国\", \"value\" => \"France\" ],\n                    [ \"label\" => \"澳大利亚\", \"value\" => \"Australia\"] \n				]\n			],\n			\'phone\' => [] # 使用默认设置\n		],\n		#\'temp\' => TRUE   # 临时编辑，不保存\n	]\n]);\n# df_end\n\n/**\n * $error   错误消息\n * $row_id  主键值，如果设置的多列联合主键，值用半角逗号分隔，例：列a值,列b值\n * $data     通过规则检测的数据 key => value\n */\nddy_register_form_handler(function (&$error, $row_id, $data)\n{\n	$m = ddy_model(\'offices\', \'demo\');\n	$result = $m->update([\'officeCode\' => $row_id], $data);\n						  \n	if ($result === FALSE) {\n		$error = \"保存错误\";\n	    return FALSE;\n	}\n						  \n	return TRUE;\n});\n```\n\n### `array ddy_current_session()`\n> 获取当前用户的信息，包含下列字段\n```\n{\n	\"id\" : 1,\n	\"username\" : \"用户名\",\n	\"nick\" : \"昵称\",\n	\"roles\" : \"角色ID\",\n	\"email\" : \"xxx@xx.com\",\n	\"mobile\" : \"159xxxxxxx\"\n}\n```\n', 1, '2024-03-24 19:55:43', '#!markdown\n\n内嵌PHP是在沙盒中执行，只允许调用白名单中的函数。\n白名单设置规则：\n\n1. 指定的系统函数,下列的系统函数列表\n2. 所有_array_,_str_,_url_,_ddy_为前缀的函数，框架内置函数主要为_ddy_前缀函数，在后面详细说明；应用自定义的函数，也基本以_ddy_做为前缀。\n\n## 系统函数\n\n- [`print`](http://php.net/manual/en/function.print.php) \n- [`var_dump`](http://php.net/manual/en/function.var-dump.php)\n- [`json_encode`](http://php.net/manual/en/function.json-encode.php)\n- [`json_decode`](http://php.net/manual/en/function.json-decode.php)\n- [`count`](http://php.net/manual/en/function.count.php)\n- [`array`](http://php.net/manual/en/function.array.php)\n- [`sizeof`](http://php.net/manual/en/function.sizeof.php)\n- [`is_array`](http://php.net/manual/en/function.is-array.php)\n- [`is_bool`](http://php.net/manual/en/function.is-bool.php)\n- [`is_numeric`](http://php.net/manual/en/function.is-numeric.php)\n- [`is_string`](http://php.net/manual/en/function.is-string.php)\n- [`trim`](http://php.net/manual/en/function.trim.php)\n- [`date`](http://php.net/manual/en/function.date.php)\n- [`time`](http://php.net/manual/en/function.time.php)\n- [`strtotime`](http://php.net/manual/en/function.strtotime.php)\n- [`printf`](http://php.net/manual/en/function.printf.php)\n- [`sprintf`](http://php.net/manual/en/function.sprintf.php)\n- [`number_format`](http://php.net/manual/en/function.number-format.php)\n- [`implode`](http://php.net/manual/en/function.implode.php)\n- [`explode`](http://php.net/manual/en/function.explode.php)\n- [`substr`](http://php.net/manual/en/function.substr.php)\n- [`preg_match`](http://php.net/manual/en/function.preg-match.php)\n- [`preg_match_all`](http://php.net/manual/en/function.preg-match-all.php)\n- [`preg_split`](http://php.net/manual/en/function.preg-split.php)\n- [`preg_replace`](http://php.net/manual/en/function.preg-replace.php)\n- [`parse_url`](http://php.net/manual/en/function.parse-url.php)\n- [`parse_str`](http://php.net/manual/en/function.parse-str.php)\n- [`http_build_query`](http://php.net/manual/en/function.http-build-query.php)\n- [`round`](http://php.net/manual/en/function.round.php)\n- [`intval`](http://php.net/manual/en/function.intval.php)\n- [`ceil`](http://php.net/manual/en/function.ceil.php)\n- [`floor`](http://php.net/manual/en/function.floor.php)\n- [`rand`](http://php.net/manual/en/function.rand.php)\n- [`abs`](http://php.net/manual/en/function.abs.php)\n- [`usort`](http://php.net/manual/en/function.usort.php)\n- [`uasort`](http://php.net/manual/en/function.uasort.php)\n- [`uksort`](http://php.net/manual/en/function.uksort.php)\n- [`sort`](http://php.net/manual/en/function.sort.php)\n- [`asort`](http://php.net/manual/en/function.asort.php)\n- [`ksort`](http://php.net/manual/en/function.ksort.php)\n- [`min`](http://php.net/manual/en/function.min.php)\n- [`max`](http://php.net/manual/en/function.max.php)\n- [`extract`](http://php.net/manual/en/function.extract.php)\n- [`in_array`](http://php.net/manual/en/function.in-array.php)\n\n\n## dataddy内置函数\n\n### `void ddy_hello()`\n> 打印 Hello,world!\n\n---\n\n### `\\GG\\Db\\GlobalDb ddy_db(string $dsn)`\n> 获取DB对象，一般不直接调用该函数；使用ddy_model\n\n**参数**\n\n`$dsn`  数据源ID，在DSN管理中配置的DSN的引用名称\n\n---\n\n### `\\GG\\Db\\Model\\Base ddy_model(string $table, string $dsn = \'default\')`\n> 获取Model对象，进行数据库操作\n\n**参数**\n\n`$table`  表名\n\n`$dsn`    数据源名称\n\n---\n\n### `void ddy_macro(string $name, string $value, bool $quote = TRUE)`\n> 设置模板宏\n\n**参数**\n\n`$name`     宏名称\n\n`$value`	宏值\n\n`$quote`	宏值在引用时，是否使用引号引起\n\n---\n\n### `mixed ddy_data(string $name, mixed $default = NULL)`\n> 获取页面查询条件的值\n\n---\n\n### `number ddy_math_exp(string $exp)`\n> 执行一个算术表达式字符串，返回其计算结果。（沙盒环境，不允许调用`eval`函数）\n\n---\n\n### `void ddy_set_page_data(mixed $data, string $name = \'default\')`\n> 非SQL类型报表，可以通过PHP直接将数据结果集，设置给页面。\n\n`$name` 为数据的名称, **default** 为报表数据\n\n报表数据结果集的格式约定：\n\n```\nddy_set_page_data([\n	\"report1\" => [  # report1为report id\n		\"rows\" => [ # report的数据\n			[ \"列1\" => \"值11\", \"列2\" => \"值13\" ],\n			[ \"列1\" => \"值21\", \"列2\" => \"值23\" ],\n			[ \"列1\" => \"值31\", \"列2\" => \"值33\" ],\n		]\n	],\n	\"report2\" => [\n		\"rows\" => [\n			[ \"列1\" => \"值11\", \"列2\" => \"值13\" ],\n			[ \"列1\" => \"值21\", \"列2\" => \"值23\" ],\n			[ \"列1\" => \"值31\", \"列2\" => \"值33\" ],\n		]\n	],\n]);\n```\n\n---\n\n### `mixed ddy_get_page_data(string $name = \'default\')`\n> 获取页面的数据\n\n### `void ddy_set_table_options(string $report_id, array $options)`\n> 设置数据表的选项，如果报表的设置框里已有该report\\_id的静态配置，则会合并，覆盖重叠的key配置。\n\n### `void ddy_set_chart_options(string $chart_id, mixed $options)`\n> 设置图表的选项，`$options`可以是完整的amchart的相关配置，也可以简化的数据列名称的配置\n\n### `void ddy_set_options(mixed $options, string $name = \'default\')` \n> 设置通用选项，可以视为报表与框架引擎间的一种传递数据的方式。当`$name`为default时，设置全局报表配置。\n\n### `mixed ddy_json_decode(string $json, mixed $default = [])`\n> 封装的json\\_decode函数， 支持包含注释的json字符串；支持设置默认值。\n\n### `void ddy_view_filter()`\n> 输出定义的查询控件HTML\n\n### `void ddy_register_form_handler(string $report_id, callable $handler = NULL)`\n> 定义可编辑报表的表单处理句柄\n\n**参数**\n\n`$report_id`  可编辑报表的报表ID\n\n`$handler`	  表单处理句柄, `function(&$error, $row_id, $data)`\n\n**示例**\n```\n# df_start\nddy_set_table_options(0, [\n	\'fields\' => [\n		\'city\' => [ \'class\' => \'text-success\' ]\n	],\n	\'edit\' => [\n		\'pk\' => \'0\', # 指定主键列，数字视为索引，可以直接写列的展现名称（officeCode)。如果有多列联合主键，可以指定一个数据：[ \'列a\', \'列b\' ]；默认为第一列；如果主键列有属性eid，则主键值优先取该属性的值\n		\'columns\' => [\n			//可编辑的列名\n			\'国家\' => [\n				\'type\' =>  \"select\",  # 类型，目前仅 select 和 text ，默认为text\n				#\'rule\' => \'numeric\', # 字段校验规则，\n				\'name\' => \'country\',  # 字段名，默认为列名\n				\'options\' => [        # select的选项\n					[ \"label\" => \"美国\", \"value\" => \"USA\" ],\n                    [ \"label\" => \"中国\", \"value\" => \"China\" ],\n                    [ \"label\" => \"日本\", \"value\" => \"Janpan\" ],\n                    [ \"label\" => \"法国\", \"value\" => \"France\" ],\n                    [ \"label\" => \"澳大利亚\", \"value\" => \"Australia\"] \n				]\n			],\n			\'phone\' => [] # 使用默认设置\n		],\n		#\'temp\' => TRUE   # 临时编辑，不保存\n	]\n]);\n# df_end\n\n/**\n * $error   错误消息\n * $row_id  主键值，如果设置的多列联合主键，值用半角逗号分隔，例：列a值,列b值\n * $data     通过规则检测的数据 key => value\n */\nddy_register_form_handler(function (&$error, $row_id, $data)\n{\n	$m = ddy_model(\'offices\', \'demo\');\n	$result = $m->update([\'officeCode\' => $row_id], $data);\n						  \n	if ($result === FALSE) {\n		$error = \"保存错误\";\n	    return FALSE;\n	}\n						  \n	return TRUE;\n});\n```\n\n### `array ddy_current_session()`\n> 获取当前用户的信息，包含下列字段\n```\n{\n	\"id\" : 1,\n	\"username\" : \"用户名\",\n	\"nick\" : \"昵称\",\n	\"roles\" : \"角色ID\",\n	\"email\" : \"xxx@xx.com\",\n	\"mobile\" : \"159xxxxxxx\"\n}\n```\n', 1, NULL, 'default', '', '', '', '', '', '', 0, 1, 1, '', 91, '2024-01-26 07:50:59', '2024-03-24 11:55:43');
INSERT INTO `menuitem` VALUES (3, '模板设计', 'report', '', 'none', 1, '#!markdown\n\n## 模板解析过程\n\n### 1. 控件解析及替换\n搜索所有控件定义`${...}`，创建控件类型对象的Filter对象，并将控件的当前值替换掉控件定义。\n\n语法：`${form_name|label_name|default_value|type_define}`\n- *form_name*      **required**     控制表单名称，即在请求query串中的参数名\n- *label_name*     **optional**     表单的标签名称，可为空 \n- *default_value*  **optional**     默认值，如果是类型为时间，默认值直接写[时间表达式](http://php.net/manual/zh/datetime.formats.relative.php) \n- *type_define*    **optional**     系统类型包含: date,string,enum,bool，类型参数可通过 .key 或 (key:val,key:val) 方式传入, .key 形式为 (key:true) 的简写\n    \n### 2. 内嵌PHP执行\n\n### 3. 按分号拆分SQL语句\n\n### 4. 解析SQL\n\n#### 4.1 解析SQL配置\n语法：`-- @xxx=...`\n配置以特定SQL注释的方式，写在SQL语句的开头，一个配置一行\n配置针对当前SQL语句，一般定义数据插件，标题，ID等\nSQL配置会和全局配置中的相关配置合并\n\n#### 4.2 宏替换 \n宏使用方式：\n\n`{xx}` 直接用名为xx的宏的值替换当前占位符\n\n`{?xx}` 如果名为xx的宏的值为空，则删除当前行，如果当前定义处于行头`-- {?xx}`，则删除内容至最后（当前SQL语句）\n\n`{?!xx}` 如果名为xx的宏的值不为空，则删除当前行\n\n`{4?xx}` 同`{?xx}`，但如果删除行数为4（可修改数字）\n\n宏来自于全局配置及当前控件定义的宏\n\n### 4.3 SQL字段配置\n`... AS \'列名\', -- @{\"key\":\"value\"}`\n\n字段配置以SQL注释的方式，嵌入在SQL语句之中\n\n`click/request*100 AS \'上报请求CTR\' -- @round({上报点击}/{请求}*100, 4)`  \n\n上术规则，定义了上报请求CTR的计算规则，用于实时计算平均/合计项。\n\n\n### 5. 清除注释，执行SQL', 1, '2024-01-30 11:02:42', '#!markdown\n\n## 模板解析过程\n\n### 1. 控件解析及替换\n搜索所有控件定义`${...}`，创建控件类型对象的Filter对象，并将控件的当前值替换掉控件定义。\n\n语法：`${form_name|label_name|default_value|type_define}`\n- *form_name*      **required**     控制表单名称，即在请求query串中的参数名\n- *label_name*     **optional**     表单的标签名称，可为空 \n- *default_value*  **optional**     默认值，如果是类型为时间，默认值直接写[时间表达式](http://php.net/manual/zh/datetime.formats.relative.php) \n- *type_define*    **optional**     系统类型包含: date,string,enum,bool，类型参数可通过 .key 或 (key:val,key:val) 方式传入, .key 形式为 (key:true) 的简写\n    \n### 2. 内嵌PHP执行\n\n### 3. 按分号拆分SQL语句\n\n### 4. 解析SQL\n\n#### 4.1 解析SQL配置\n语法：`-- @xxx=...`\n配置以特定SQL注释的方式，写在SQL语句的开头，一个配置一行\n配置针对当前SQL语句，一般定义数据插件，标题，ID等\nSQL配置会和全局配置中的相关配置合并\n\n#### 4.2 宏替换 \n宏使用方式：\n\n`{xx}` 直接用名为xx的宏的值替换当前占位符\n\n`{?xx}` 如果名为xx的宏的值为空，则删除当前行，如果当前定义处于行头`-- {?xx}`，则删除内容至最后（当前SQL语句）\n\n`{?!xx}` 如果名为xx的宏的值不为空，则删除当前行\n\n`{4?xx}` 同`{?xx}`，但如果删除行数为4（可修改数字）\n\n宏来自于全局配置及当前控件定义的宏\n\n### 4.3 SQL字段配置\n`... AS \'列名\', -- @{\"key\":\"value\"}`\n\n字段配置以SQL注释的方式，嵌入在SQL语句之中\n\n`click/request*100 AS \'上报请求CTR\' -- @round({上报点击}/{请求}*100, 4)`  \n\n上术规则，定义了上报请求CTR的计算规则，用于实时计算平均/合计项。\n\n\n### 5. 清除注释，执行SQL', 1, NULL, 'default', '', '', '', '', '', '', 0, 1, 1, '', 92, '2024-01-26 07:50:59', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (4, '系统插件', 'report', '', 'none', 1, '#!markdown\n\n## 查询插件/查询控件\n\n查询控件是用户和报表的主要交互机制，通过较好的交互体验，获取用户的输入，并将期转换成报表的查询字段。\n\n查询控件都继承自 `\\MY\\Filter_Abstract` 类，需要实现UI渲染及值的校验工作。\n\n控件在报表中的调用语法：`${form_name|label_name|default_value|type_define}`\n\n- *form_name*      **required**     控制表单名称，即在请求query串中的参数名\n- *label_name*     **optional**     表单的标签名称，可为空 \n- *default_value*  **optional**     默认值，如果是类型为时间，默认值直接写[时间表达式](http://php.net/manual/zh/datetime.formats.relative.php) \n- *type_define*    **optional**     系统类型包含: date,string,enum,bool等，默认为date。类型的属性或参数可通过 .key 或 (key:val,key:val) 方式传入, .key 形式为 (key:true) 的简写。key/value对，也可以由一个函数生成，见下示例。\n\n示例\n`${date|日期|yesterday}`\n`${date|日期|-7 days,yesterday|date_range}`\n`${ratio|百分比|0|number.decimal(min:0,max:100)}` \n`${type|类型||enum(ddy_generate_type)}`\n\n控件通用属性\n\n- `raw`    控件值是否不需要处理（默认会使用SQL转义，并用引号引起)，有一些控制该值默认为`true`，比如`number`控件\n- `macro`  控件值是否定义为一个宏引用，所有非宏引用的控件，在控件的调用处，都会会控件本身的值做替换，宏控件，则替换为空白；如`date_range`之类控件，该值默认为`true`\n\n### `string` 文本输入控件\n\n### `number` 数字输入控件\n**特殊属性**\n\n- `multiple` bool 多个数字模式，用逗号分隔\n- `min` number 最小值\n- `max` number 最大值\n- `decimal` bool 是否支持小数\n- [inputmask](https://github.com/RobinHerbots/jquery.inputmask/blob/3.x/README_numeric.md)插件支持的自定义选项\n\n**默认属性**\n\n- `raw` true\n\n### `enum` 固定选项\n**特殊属性**\n\n- `multiple` 是否可多选\n- `minWidth` 控件展示的最小宽度，默认为150\n- 选项值 key:value对\n\n示例: `${ad_type|广告类型|brand|enum(brand:品牌广告,union:联盟广告,adx:ADX广告)}`\n\n### `date` 日期控件\n**特殊属性**\n\n- `format`  指定日期格式化规则，默认为 `%Y-%m-%d`\n- `limit`	指定日期，相对于当天的最大距离天数\n- `end`		指定日期控件最大可选日期\n- `month`   指定为月份选择模式\n\n### `date_range` 日期范围控件\n特殊属性参考`date`控件\n\n**默认属性**\n\n- `macro` true\n- `range` 最大日期范围，默认`31`\n\n### `time`	时间选择控件\n**特殊属性**\n\n属性参考`date`控件\n\n- `hour` 是否为小时模式，默认为分钟模式\n\n### `time_range` 时间范围选择控件\n特殊属性参考`time`控件\n\n**默认属性**\n\n- `macro` true\n- `range` 最大日期范围，默认`30`\n\n### `bool` 开关选项\n\n**默认属性**\n\n- `macro` true\n\n### `combine` 组合控件\n将几个控件的值，组合成一个，一般用来做条件判断时使用。\n组合的控件名称由属性传入，见示例\n\n**默认属性**\n\n- macro true\n\n示例\n\n`${a|控件a}`\n`${b|控件b}`\n`${c|组合控件||combine(a,b)}`\n\n有一种简化的写法，可以直接使用多个宏变量的组合条件\n`{a,b}`, `{?a,b}`, `{?!a,b,c}` \n', 1, '2024-01-30 11:03:27', '#!markdown\n\n## 查询插件/查询控件\n\n查询控件是用户和报表的主要交互机制，通过较好的交互体验，获取用户的输入，并将期转换成报表的查询字段。\n\n查询控件都继承自 `\\MY\\Filter_Abstract` 类，需要实现UI渲染及值的校验工作。\n\n控件在报表中的调用语法：`${form_name|label_name|default_value|type_define}`\n\n- *form_name*      **required**     控制表单名称，即在请求query串中的参数名\n- *label_name*     **optional**     表单的标签名称，可为空 \n- *default_value*  **optional**     默认值，如果是类型为时间，默认值直接写[时间表达式](http://php.net/manual/zh/datetime.formats.relative.php) \n- *type_define*    **optional**     系统类型包含: date,string,enum,bool等，默认为date。类型的属性或参数可通过 .key 或 (key:val,key:val) 方式传入, .key 形式为 (key:true) 的简写。key/value对，也可以由一个函数生成，见下示例。\n\n示例\n`${date|日期|yesterday}`\n`${date|日期|-7 days,yesterday|date_range}`\n`${ratio|百分比|0|number.decimal(min:0,max:100)}` \n`${type|类型||enum(ddy_generate_type)}`\n\n控件通用属性\n\n- `raw`    控件值是否不需要处理（默认会使用SQL转义，并用引号引起)，有一些控制该值默认为`true`，比如`number`控件\n- `macro`  控件值是否定义为一个宏引用，所有非宏引用的控件，在控件的调用处，都会会控件本身的值做替换，宏控件，则替换为空白；如`date_range`之类控件，该值默认为`true`\n\n### `string` 文本输入控件\n\n### `number` 数字输入控件\n**特殊属性**\n\n- `multiple` bool 多个数字模式，用逗号分隔\n- `min` number 最小值\n- `max` number 最大值\n- `decimal` bool 是否支持小数\n- [inputmask](https://github.com/RobinHerbots/jquery.inputmask/blob/3.x/README_numeric.md)插件支持的自定义选项\n\n**默认属性**\n\n- `raw` true\n\n### `enum` 固定选项\n**特殊属性**\n\n- `multiple` 是否可多选\n- `minWidth` 控件展示的最小宽度，默认为150\n- 选项值 key:value对\n\n示例: `${ad_type|广告类型|brand|enum(brand:品牌广告,union:联盟广告,adx:ADX广告)}`\n\n### `date` 日期控件\n**特殊属性**\n\n- `format`  指定日期格式化规则，默认为 `%Y-%m-%d`\n- `limit`	指定日期，相对于当天的最大距离天数\n- `end`		指定日期控件最大可选日期\n- `month`   指定为月份选择模式\n\n### `date_range` 日期范围控件\n特殊属性参考`date`控件\n\n**默认属性**\n\n- `macro` true\n- `range` 最大日期范围，默认`31`\n\n### `time`	时间选择控件\n**特殊属性**\n\n属性参考`date`控件\n\n- `hour` 是否为小时模式，默认为分钟模式\n\n### `time_range` 时间范围选择控件\n特殊属性参考`time`控件\n\n**默认属性**\n\n- `macro` true\n- `range` 最大日期范围，默认`30`\n\n### `bool` 开关选项\n\n**默认属性**\n\n- `macro` true\n\n### `combine` 组合控件\n将几个控件的值，组合成一个，一般用来做条件判断时使用。\n组合的控件名称由属性传入，见示例\n\n**默认属性**\n\n- macro true\n\n示例\n\n`${a|控件a}`\n`${b|控件b}`\n`${c|组合控件||combine(a,b)}`\n\n有一种简化的写法，可以直接使用多个宏变量的组合条件\n`{a,b}`, `{?a,b}`, `{?!a,b,c}` \n', 1, NULL, 'default', '', '', '', '', '', '', 0, 1, 1, '', 90, '2024-01-26 07:50:59', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (5, '报表高级功能', 'report', 'open:9f034b63948763d489f944319c2eb3de', 'none', 1, '#!markdown\n\n## 全局宏配置\n可以在系统配置中，新建立一个名称 `macro`的配置，平台全部的报表，可以引用到其定义的宏。\n宏定义，就是定义一个JSON对象，key => value形式。通过 `{key}`引用到value的值。\n\n## SQL查询缓存\n\n通过配置table选项`sql_cache`来开启SQL缓存，值为缓存时间，单位秒。\n\ncli模式（cron作业）会强制不使用缓存，页面请求需要强制刷新缓存，可以在请求服务器的参数加上`_disable_cache=1`\n\n使用场景：\n\n通过CRON定时去生成查询耗时比较长的SQL，所有用户查询，直接读取缓存。\n\n\n## 外部报表\n\n某些情况，需要将报表公开给第三方人员查看，但又不想公开内部系统给第三方，带来安全隐患。\n\n外部报表，使用单独的网站入口文件，需要web服务器单独配置一个域名使用；外部报表严格限制了访问内容，只能访问到指定的页面。\n\n内部报表的入口文件为：`public/index.php`\n\n外部报表的入口文件为：`public/open/index.php`\n\n\n1. 如何将一个报表设置为外部报表？\n\n	在报表的URI配置项里，配置 `open:32位md5字符串`。32位的md5字符串，是公开报表的访问路径。\n\n	例：`open:098f6bcd4621d373cade4e832627b4f6` 的外部访问url为 `http://xxx/open/098f6bcd4621d373cade4e832627b4f6`\n\n2. 如何给页面设置访问密码？\n\n	大部分情况下，因为路径本身是一个md5串，具有一定的保密功能，不太需要设置密码。如果真想再设置一个访问密码，可以这么设置`open:32位md5字符串@密码`。\n\n', 1, '2024-01-30 11:03:52', '#!markdown\n\n## 全局宏配置\n可以在系统配置中，新建立一个名称 `macro`的配置，平台全部的报表，可以引用到其定义的宏。\n宏定义，就是定义一个JSON对象，key => value形式。通过 `{key}`引用到value的值。\n\n## SQL查询缓存\n\n通过配置table选项`sql_cache`来开启SQL缓存，值为缓存时间，单位秒。\n\ncli模式（cron作业）会强制不使用缓存，页面请求需要强制刷新缓存，可以在请求服务器的参数加上`_disable_cache=1`\n\n使用场景：\n\n通过CRON定时去生成查询耗时比较长的SQL，所有用户查询，直接读取缓存。\n\n\n## 外部报表\n\n某些情况，需要将报表公开给第三方人员查看，但又不想公开内部系统给第三方，带来安全隐患。\n\n外部报表，使用单独的网站入口文件，需要web服务器单独配置一个域名使用；外部报表严格限制了访问内容，只能访问到指定的页面。\n\n内部报表的入口文件为：`public/index.php`\n\n外部报表的入口文件为：`public/open/index.php`\n\n\n1. 如何将一个报表设置为外部报表？\n\n	在报表的URI配置项里，配置 `open:32位md5字符串`。32位的md5字符串，是公开报表的访问路径。\n\n	例：`open:098f6bcd4621d373cade4e832627b4f6` 的外部访问url为 `http://xxx/open/098f6bcd4621d373cade4e832627b4f6`\n\n2. 如何给页面设置访问密码？\n\n	大部分情况下，因为路径本身是一个md5串，具有一定的保密功能，不太需要设置密码。如果真想再设置一个访问密码，可以这么设置`open:32位md5字符串@密码`。\n\n', 1, NULL, 'default', '', '', '', '', '', '', 0, 1, 1, '', 89, '2024-01-26 07:50:59', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (6, '预警说明', 'report', '', 'none', 1, '#!markdown\n\n## 预警信息发送\n有时候会需要预警报表，意思就是这个报表的数据并不是供用户查看的，或者说不仅仅是供用户查看的，而是作为后台定时脚本独立运行，并且将运行结果发送给相应负责人的。\n如果是这样的脚本，我们需要配置“Crontab时间配置”和“配置”,来发送报警数据，目前平台支持两种发送：邮件和微信。\n这里给出完整的配置示例：\n\n###邮件发送\nCrontab时间配置: */30 * * * * mail  \n每隔30分钟运行脚本，并且将运行输出结果邮件发送给配置人员。\n邮件配置\n\n\n`{\n	\"mail\" : {\n		\"receiver\" : \"zhangsan@mail.com,lisi@mail.com\",\n		\"subject\" : \"这是一个xxx的预警\"\n	}\n}`\n\n\n###微信发送\nCrontab时间配置: */30 * * * * alarm  \n每隔30分钟运行脚本，并且将运行输出结果邮件发送给配置人员。\n微信配置\n\n\n`{\n	\"alarm\" : {\n		\"type\" : \"weixin\",\n		\"receiver\" : {\n			\"weixin\" : \"zhangsan,lisi\"\n		}\n	}\n}`\n\n\n另外除了这种通过配置来发送报警信息外，同样系统也封装了相应的函数\n\n`ddy_adeaz_mail($receiver, $msg, $title);`\n\n`ddy_adeaz_alarm($receiver,  $msg);`\n\n当然了不管是邮件发送还是微信发送都需要有环境的支持，比如邮件发送需要配置自己的或者第三方的邮件配置，如果是微信发送则需要有相应的微信发送接口\n', 1, '2024-01-30 11:02:22', '#!markdown\n\n## 预警信息发送\n有时候会需要预警报表，意思就是这个报表的数据并不是供用户查看的，或者说不仅仅是供用户查看的，而是作为后台定时脚本独立运行，并且将运行结果发送给相应负责人的。\n如果是这样的脚本，我们需要配置“Crontab时间配置”和“配置”,来发送报警数据，目前平台支持两种发送：邮件和微信。\n这里给出完整的配置示例：\n\n###邮件发送\nCrontab时间配置: */30 * * * * mail  \n每隔30分钟运行脚本，并且将运行输出结果邮件发送给配置人员。\n邮件配置\n\n\n`{\n	\"mail\" : {\n		\"receiver\" : \"zhangsan@mail.com,lisi@mail.com\",\n		\"subject\" : \"这是一个xxx的预警\"\n	}\n}`\n\n\n###微信发送\nCrontab时间配置: */30 * * * * alarm  \n每隔30分钟运行脚本，并且将运行输出结果邮件发送给配置人员。\n微信配置\n\n\n`{\n	\"alarm\" : {\n		\"type\" : \"weixin\",\n		\"receiver\" : {\n			\"weixin\" : \"zhangsan,lisi\"\n		}\n	}\n}`\n\n\n另外除了这种通过配置来发送报警信息外，同样系统也封装了相应的函数\n\n`ddy_adeaz_mail($receiver, $msg, $title);`\n\n`ddy_adeaz_alarm($receiver,  $msg);`\n\n当然了不管是邮件发送还是微信发送都需要有环境的支持，比如邮件发送需要配置自己的或者第三方的邮件配置，如果是微信发送则需要有相应的微信发送接口\n', 1, NULL, 'default', '', '', '', '', '', '', 0, 1, 1, '', 93, '2024-01-26 07:50:59', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (7, '报表示例', 'folder', '', 'none', 0, NULL, 0, NULL, NULL, 0, NULL, 'default', '', '', '', '', '', '', 0, 1, 0, '', 100, '2024-01-26 07:50:59', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (8, 'sql语句的报表', 'report', '', 'none', 1, '${date|日期|-6 days,yesterday|date_range.macro(range:30)};\n${obj_id|对象id||testObj.macro.raw};\n${show_income|显示收入|on|bool.macro};\n${show_cost|显示成本|0|bool.macro};\n${cond|||combine(show_income,show_cost)};\n\n<?php\n\n/*\n*上面是配置的过滤插件：日期插件，对象插件(testObj,还记得安装时候选择的“TestFilter”吗)，两个boolean插件，最后一个“cond”是“show_income”和“show_cost”的合并条件，其中有一个变量为真，则该变量为真\n*\n*示例一：直接使用数据库表查询，可以通过配置：-- {?show_income}，告诉sql控制器处理处理sql语句时候是否显示去掉和拼接“SUM(income) AS \'收入\'”,“-- {?show_cost}”功能类似\n*     “-- @{点击}/{请求}*100”配置用来控制服务器处理汇总数据时候，将以怎样的方式来处理“CTR”字段。\n*      日期插件生成的是一个时间段，传递给后台的参数是“from_date”开始日期，“to_date”结束日期，“{?from_date}”这里的“?”是告诉处理引擎根据是否有传递该变量值而决定加或者去除该行\n*	\n*示例二：-- {?cond}配置告诉处理引擎如果该条件为真则执行对应的sql，如果为假，则忽略改sql\n*\n*示例三：使用了“系统配置”的“macro”配置的“income”和“obj”，处理引擎会根据配置替换这两个变量为真实值\n*\n*/\n\n?>\n\n-- @id=示例一\nSELECT\n	me.date AS \'日期\',\n 	CONCAT(obj.name , \'【\', obj.id,\'】\') AS \'对象\',\n	SUM(request) AS \'请求\',\n	SUM(click) AS \'点击\',\n	SUM(impression) AS \'展现\',\n	SUM(income) AS \'收入\', -- {?show_income}\n	SUM(cost) AS \'成本\', -- {?show_cost}\n	SUM(click)/SUM(request)*100 AS \'CTR\' -- @{点击}/{请求}*100\nFROM test_income_report AS me\nLEFT JOIN test_obj AS obj\nON me.obj_id = obj.id\nWHERE me.date >= {?from_date}\nAND me.date <= {?to_date}\nAND me.obj_id IN ({?obj_id})\nGROUP BY me.date, me.obj_id;\n\n-- {?cond}\n-- @id=示例二\nSELECT \n   me.date AS \'日期\',\n 	CONCAT(obj.name , \'【\', obj.id,\'】\') AS \'对象\',\n	SUM(income) AS \'收入\', -- {?show_income}\n	SUM(cost) AS \'成本\', -- {?show_cost}\n	SUM(impression) AS \'展现\'\nFROM test_income_report AS me\nLEFT JOIN test_obj AS obj\nON me.obj_id = obj.id\nWHERE me.date >= {?from_date}\nAND me.date <= {?to_date}\nAND me.obj_id IN ({?obj_id})\nGROUP BY me.date, me.obj_id;\n\n-- @id=示例三\n-- @sum=0\n-- @avg=1\nSELECT\n   me.date AS \'日期\',\n	CONCAT(obj.name , \'【\', obj.id,\'】\') AS \'对象\',\n	SUM(request) AS \'请求\',\n	SUM(click) AS \'点击\',\n	SUM(impression) AS \'展现\',\n	SUM(income) AS \'收入\', -- {?show_income}\n	SUM(cost) AS \'成本\', -- {?show_cost}\n	SUM(click)/SUM(request)*100 AS \'CTR\' -- @{点击}/{请求}*100\nFROM {income} AS me\nLEFT JOIN {obj} AS obj\nON me.obj_id = obj.id\nWHERE date >= {?from_date}\nAND date <= {?to_date}\nAND me.obj_id IN ({?obj_id})\nGROUP BY me.date, me.obj_id', 0, '2024-04-23 10:21:36', '${date|日期|-6 days,yesterday|date_range.macro(range:30)};\n${obj_id|对象id||testObj.macro.raw};\n${show_income|显示收入|on|bool.macro};\n${show_cost|显示成本|0|bool.macro};\n${cond|||combine(show_income,show_cost)};\n\n<?php\n\n/*\n*上面是配置的过滤插件：日期插件，对象插件(testObj,还记得安装时候选择的“TestFilter”吗)，两个boolean插件，最后一个“cond”是“show_income”和“show_cost”的合并条件，其中有一个变量为真，则该变量为真\n*\n*示例一：直接使用数据库表查询，可以通过配置：-- {?show_income}，告诉sql控制器处理处理sql语句时候是否显示去掉和拼接“SUM(income) AS \'收入\'”,“-- {?show_cost}”功能类似\n*     “-- @{点击}/{请求}*100”配置用来控制服务器处理汇总数据时候，将以怎样的方式来处理“CTR”字段。\n*      日期插件生成的是一个时间段，传递给后台的参数是“from_date”开始日期，“to_date”结束日期，“{?from_date}”这里的“?”是告诉处理引擎根据是否有传递该变量值而决定加或者去除该行\n*	\n*示例二：-- {?cond}配置告诉处理引擎如果该条件为真则执行对应的sql，如果为假，则忽略改sql\n*\n*示例三：使用了“系统配置”的“macro”配置的“income”和“obj”，处理引擎会根据配置替换这两个变量为真实值\n*\n*/\n\n?>\n\n-- @id=示例一\nSELECT\n	me.date AS \'日期\',\n 	CONCAT(obj.name , \'【\', obj.id,\'】\') AS \'对象\',\n	SUM(request) AS \'请求\',\n	SUM(click) AS \'点击\',\n	SUM(impression) AS \'展现\',\n	SUM(income) AS \'收入\', -- {?show_income}\n	SUM(cost) AS \'成本\', -- {?show_cost}\n	SUM(click)/SUM(request)*100 AS \'CTR\' -- @{点击}/{请求}*100\nFROM test_income_report AS me\nLEFT JOIN test_obj AS obj\nON me.obj_id = obj.id\nWHERE me.date >= {?from_date}\nAND me.date <= {?to_date}\nAND me.obj_id IN ({?obj_id})\nGROUP BY me.date, me.obj_id;\n\n-- {?cond}\n-- @id=示例二\nSELECT \n   me.date AS \'日期\',\n 	CONCAT(obj.name , \'【\', obj.id,\'】\') AS \'对象\',\n	SUM(income) AS \'收入\', -- {?show_income}\n	SUM(cost) AS \'成本\', -- {?show_cost}\n	SUM(impression) AS \'展现\'\nFROM test_income_report AS me\nLEFT JOIN test_obj AS obj\nON me.obj_id = obj.id\nWHERE me.date >= {?from_date}\nAND me.date <= {?to_date}\nAND me.obj_id IN ({?obj_id})\nGROUP BY me.date, me.obj_id;\n\n-- @id=示例三\n-- @sum=0\n-- @avg=1\nSELECT\n   me.date AS \'日期\',\n	CONCAT(obj.name , \'【\', obj.id,\'】\') AS \'对象\',\n	SUM(request) AS \'请求\',\n	SUM(click) AS \'点击\',\n	SUM(impression) AS \'展现\',\n	SUM(income) AS \'收入\', -- {?show_income}\n	SUM(cost) AS \'成本\', -- {?show_cost}\n	SUM(click)/SUM(request)*100 AS \'CTR\' -- @{点击}/{请求}*100\nFROM {income} AS me\nLEFT JOIN {obj} AS obj\nON me.obj_id = obj.id\nWHERE date >= {?from_date}\nAND date <= {?to_date}\nAND me.obj_id IN ({?obj_id})\nGROUP BY me.date, me.obj_id', 1, '2024-04-01 20:09:51', 'default', '', '* * * * * alarm', '', '', '', '{\n	\"alarm\": {\n		\"type\": \"adgroup\",\n		\"receiver\": {\n			\"adgroup\": \"lisi\"\n		}\n	}\n}', 0, 0, 7, '', 99, '2024-01-26 07:50:59', '2024-04-23 02:21:36');
INSERT INTO `menuitem` VALUES (9, '带图表的报表', 'report', '', 'none', 1, '${date|日期|-6 days,yesterday|date_range.macro(range:30)};\n${obj_id|对象id||testObj.macro.raw};\n\n-- @sum=1\n-- @svg=1\nSELECT\n   me.date AS \'日期\',\n 	CONCAT(obj.name , \'【\', obj.id,\'】\') AS \'对象\',\n	SUM(request) AS \'请求\',\n	SUM(click) AS \'点击\',\n	SUM(impression) AS \'展现\',\n	SUM(income) AS \'收入\',\n	SUM(cost) AS \'成本\',\n	SUM(click)/SUM(request)*100 AS \'CTR\' -- @{点击}/{请求}*100\nFROM test_income_report AS me\nLEFT JOIN test_obj AS obj\nON me.obj_id = obj.id\nWHERE me.date >= {?from_date}\nAND me.date <= {?to_date}\nAND me.obj_id IN ({?obj_id})\nGROUP BY me.date, me.obj_id;', 0, '2024-08-13 15:21:25', '${date|日期|-6 days,yesterday|date_range.macro(range:30)};\n${obj_id|对象id||testObj.macro.raw};\n\n-- @sum=1\n-- @svg=1\nSELECT\n   me.date AS \'日期\',\n 	CONCAT(obj.name , \'【\', obj.id,\'】\') AS \'对象\',\n	SUM(request) AS \'请求\',\n	SUM(click) AS \'点击\',\n	SUM(impression) AS \'展现\',\n	SUM(income) AS \'收入\',\n	SUM(cost) AS \'成本\',\n	SUM(click)/SUM(request)*100 AS \'CTR\' -- @{点击}/{请求}*100\nFROM test_income_report AS me\nLEFT JOIN test_obj AS obj\nON me.obj_id = obj.id\nWHERE me.date >= {?from_date}\nAND me.date <= {?to_date}\nAND me.obj_id IN ({?obj_id})\nGROUP BY me.date, me.obj_id;', 0, '2024-01-26 16:57:28', 'default', '', '', '', '', '', '{\n	\"chart\" : {\n		\"valueAxes\": [{\n			\"id\":\"v1\",\n			\"position\": \"left\"\n		}, {\n			\"id\":\"v2\",\n			\"position\": \"right\"\n		}],\n		\"graphs\" : [\n			{ \"valueField\" : \"请求\", \"valueAxis\" : \"v1\" },\n			{ \"valueField\" : \"展现\", \"valueAxis\" : \"v1\" },\n			{ \"valueField\" : \"点击\", \"valueAxis\" : \"v1\" },\n			{ \"valueField\" : \"成本\", \"valueAxis\" : \"v2\" },\n			{ \"valueField\" : \"收入\", \"valueAxis\" : \"v2\" }\n		]\n	},\n	\"auto_refresh\": 5\n}', 0, 0, 7, '', 98, '2024-01-26 07:50:59', '2024-08-13 07:21:25');
INSERT INTO `menuitem` VALUES (10, 'php代码生成的报表', 'report', '', 'none', 1, '${date|日期|-6 days,yesterday|date_range.macro(range:30)};\n${obj_id|对象id||testObj.macro}\n${rate|扣量系数|15|number.macro.raw(min:10,max:90)};\n${business|业务类型|0|enum.macro.raw(ddy_page_business_type)};\n\n<?php\n###df_start\nfunction ddy_page_business_type(){\n	return [\n		\'0\' => \'所有\',\n		\'taobao\' => \'淘宝\',\n		\'tencent\' => \'腾讯\',\n		\'baidu\' => \'百度\'\n	];\n}\n\n###df_end\n\nfunction ddy_ctr($click, $request) {\n	return $request > 0 ? round($click / $request * 100, 2) . \'%\' : 0;\n}\n\n$start = ddy_data(\'from_date\');\n$end = ddy_data(\'to_date\');\n$obj = ddy_data(\'obj_id\');\n$rate = ddy_data(\'rate\') / 100;\n$business = ddy_data(\'business\');\n\n$where = array(\n	\'&/me.date\' => array(\n		\'>=\' => $start,\n		\'<=\' => $end,\n		\'__logic\' => \'AND\'\n	)\n);\n\nif ($obj) {\n	$where[\'&/me.obj_id\'] = $obj;\n}\n\nif ($business) {\n	$where[\'&/me.business_type\'] = $business;\n}\n\n$attrs = array(\n	\'select\' => \"date AS `日期`, CONCAT(obj.name, \'【\', obj.id,\'】\') AS \'对象\', SUM(request) AS `请求`, SUM(impression) AS `展现`, SUM(click) AS `点击`,SUM(income) AS `收入`\",\n	\'group_by\' => \'me.date, me.obj_id\'\n);\n\n$table = \"dataddy.test_income_report me LEFT JOIN dataddy.test_obj obj ON me.obj_id = obj.id\";\n$m = ddy_model($table);\n$rows = $m->select($where, $attrs);\nif ($rows) {\n	foreach($rows as &$row) {\n		$row[\'请求\'] = floor($row[\'请求\'] * (1 - $rate));\n		$row[\'点击\'] = floor($row[\'点击\'] * (1 - $rate));\n		$row[\'ctr\'] = ddy_ctr($row[\'点击\'], $row[\'请求\']);\n	}\n	ddy_set_page_data(\n        array(\n            \'这是一个php代码生成的报表\' => array(\n                \'rows\' => $rows\n            )\n        )\n	);\n} else {\n	echo \"SELECT \'没有数据\' AS \'结果\'\";\n} \n?>', 1, '2024-01-30 16:36:18', '${date|日期|-6 days,yesterday|date_range.macro(range:30)};\n${obj_id|对象id||testObj.macro}\n${rate|扣量系数|15|number.macro.raw(min:10,max:90)};\n${business|业务类型|0|enum.macro.raw(ddy_page_business_type)};\n\n<?php\n###df_start\nfunction ddy_page_business_type(){\n	return [\n		\'0\' => \'所有\',\n		\'taobao\' => \'淘宝\',\n		\'tencent\' => \'腾讯\',\n		\'baidu\' => \'百度\'\n	];\n}\n\n###df_end\n\nfunction ddy_ctr($click, $request) {\n	return $request > 0 ? round($click / $request * 100, 2) . \'%\' : 0;\n}\n\n$start = ddy_data(\'from_date\');\n$end = ddy_data(\'to_date\');\n$obj = ddy_data(\'obj_id\');\n$rate = ddy_data(\'rate\') / 100;\n$business = ddy_data(\'business\');\n\n$where = array(\n	\'&/me.date\' => array(\n		\'>=\' => $start,\n		\'<=\' => $end,\n		\'__logic\' => \'AND\'\n	)\n);\n\nif ($obj) {\n	$where[\'&/me.obj_id\'] = $obj;\n}\n\nif ($business) {\n	$where[\'&/me.business_type\'] = $business;\n}\n\n$attrs = array(\n	\'select\' => \"date AS `日期`, CONCAT(obj.name, \'【\', obj.id,\'】\') AS \'对象\', SUM(request) AS `请求`, SUM(impression) AS `展现`, SUM(click) AS `点击`,SUM(income) AS `收入`\",\n	\'group_by\' => \'me.date, me.obj_id\'\n);\n\n$table = \"dataddy.test_income_report me LEFT JOIN dataddy.test_obj obj ON me.obj_id = obj.id\";\n$m = ddy_model($table);\n$rows = $m->select($where, $attrs);\nif ($rows) {\n	foreach($rows as &$row) {\n		$row[\'请求\'] = floor($row[\'请求\'] * (1 - $rate));\n		$row[\'点击\'] = floor($row[\'点击\'] * (1 - $rate));\n		$row[\'ctr\'] = ddy_ctr($row[\'点击\'], $row[\'请求\']);\n	}\n	ddy_set_page_data(\n        array(\n            \'这是一个php代码生成的报表\' => array(\n                \'rows\' => $rows\n            )\n        )\n	);\n} else {\n	echo \"SELECT \'没有数据\' AS \'结果\'\";\n} \n?>', 0, '2024-01-26 16:57:35', 'default', '', '', '', '', '', '{\n	\"table\": {\n		\"sum\": false,\n		\"avg\": true\n	}\n}', 0, 1, 7, '', 97, '2024-01-26 07:50:59', '2024-01-30 08:36:18');
INSERT INTO `menuitem` VALUES (11, '系统监控', 'folder', '', 'none', 0, NULL, 0, NULL, NULL, 0, NULL, 'default', '', '', '', '', '', '', 0, 1, 0, '', 96, '2024-01-26 07:50:59', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (12, '系统监控的脚本', 'report', '', 'none', 1, '<?php\n//假如这是一个监测广告位流量的脚本，我们设置一个阀值，对超过这个阀值的数据进行报警。报表输出数据将会发送给配置的邮件收件人\n//当然了这只是一个示例脚本，所以这里没有设置“Crontab时间配置”，脚本并不会作为定时脚本，后台运行\n\n$where = array(\n	\'&/me.date\' => array(\n		\'>=\' => date(\'Y-m-d\', strtotime(\'-7 day\')),\n		\'<=\' => date(\'Y-m-d\', strtotime(\'-1 day\')),\n		\'__logic\' => \'AND\'\n	)\n);\n\n$vavle = \'1400\';\n\n$attrs = array(\n	\'select\' => \"date AS `日期`, CONCAT(obj.name, \'【\', obj.id,\'】\') AS \'对象\', SUM(request) AS `请求`, SUM(impression) AS `展现`, SUM(click) AS `点击`,SUM(income) AS `收入`\",\n	\'group_by\' => \'me.date, me.obj_id\',\n	\'having\' => \"`请求` > {$vavle}\"\n);\n\n$table = \"dataddy.test_income_report me LEFT JOIN dataddy_t1.test_obj obj ON me.obj_id = obj.id\";\n$m = ddy_model($table);\n$rows = $m->select($where, $attrs);\nif ($rows) {\n	ddy_set_page_data(\n        array(\n            \'流量预警报表\' => array(\n                \'rows\' => $rows\n            )\n        )\n	);\n} else {\n	echo \"SELECT \'没有数据\' AS \'结果\'\";\n} \n?>', 1, '2024-01-30 11:29:32', '<?php\n//假如这是一个监测广告位流量的脚本，我们设置一个阀值，对超过这个阀值的数据进行报警。报表输出数据将会发送给配置的邮件收件人\n//当然了这只是一个示例脚本，所以这里没有设置“Crontab时间配置”，脚本并不会作为定时脚本，后台运行\n\n$where = array(\n	\'&/me.date\' => array(\n		\'>=\' => date(\'Y-m-d\', strtotime(\'-7 day\')),\n		\'<=\' => date(\'Y-m-d\', strtotime(\'-1 day\')),\n		\'__logic\' => \'AND\'\n	)\n);\n\n$vavle = \'1400\';\n\n$attrs = array(\n	\'select\' => \"date AS `日期`, CONCAT(obj.name, \'【\', obj.id,\'】\') AS \'对象\', SUM(request) AS `请求`, SUM(impression) AS `展现`, SUM(click) AS `点击`,SUM(income) AS `收入`\",\n	\'group_by\' => \'me.date, me.obj_id\',\n	\'having\' => \"`请求` > {$vavle}\"\n);\n\n$table = \"dataddy.test_income_report me LEFT JOIN dataddy_t1.test_obj obj ON me.obj_id = obj.id\";\n$m = ddy_model($table);\n$rows = $m->select($where, $attrs);\nif ($rows) {\n	ddy_set_page_data(\n        array(\n            \'流量预警报表\' => array(\n                \'rows\' => $rows\n            )\n        )\n	);\n} else {\n	echo \"SELECT \'没有数据\' AS \'结果\'\";\n} \n?>', 0, '2024-01-30 11:29:32', 'default', '', '', '', '', '', '{\n	\"mail\" : {\n		\"receiver\" : \"zhangsan@mail.com,lisi@mail.com\",\n		\"subject\" : \"这是一个xxx的预警\"\n	}\n}', 0, 1, 11, '', 95, '2024-01-26 07:50:59', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (13, 'MongoDB数据读取', 'report', '', 'none', 0, '#!markdown\n\n```php\n$m = ddy_model(\'db_name.collection_name\', \'mongo\'); //mongo为dns中配置的名称\n\n//查询\n$m->select($filter, $options);\n$m->selectOne($filter, $options);\n$m->selectCount($filter);\n//filter参数的格式除了可以写mongo原生的格式外, 还可以完全跟mysql model的相同, 内部会处理掉mysql和mongodb查询条件的差异\n\n//字段名后的修饰符用于标识用何种规则处理元数据, 支持 date, timestamp, regex\n//{\"create_at\":{\"$gte\":IOSDATE(\'2018-10-01\'),\"$lt\":IOSDATE(\'2018-11-01\')}}\n$m->select([\n	\'create_at|date\' => [\n		\'>=\' => \'2018-10-01\',\n		\'<\' => \'2018-11-01\'\n  	]\n], $options);\n\n//{\"create_at\":{\"$ge\":Timestamp(1412180887, 0)}}\n$m->select([\n	\'create_at|timestamp\' => [\n		\'>\' => time() - 12*60*60\n	]\n], $options);\n\n//{\"goods\":{\"$in\":[1,2,3]}}\n$m->select([\n	\'goods_id\' => [1,2,3]\n]);\n\n// options 目前支持 limit/offset, order_by 写法跟mysql model相同\n$options = [\n	\'limit\' => 10,\n	\'offset\' => 10,\n	\'order_by\' => \'filed desc\'\n];\n//{\"create_at\":{\"$gt\":{\"$date\":{\"$numberLong\":\"1543248000000\"}}}},\"sort\":{\"buyer\":1}\n$m->select([\n	\'create_at|date\' => [\n		\'>=\' => \'2018-10-01\',\n  	]\n], $options);\n```\n\n```$filter```为mongo查询条件，[查看文档](https://docs.mongodb.com/manual/core/document/#document-query-filter)\n\n\n[示例报表](https://ddy.mengtuiapp.com/#/report/239)', 1, NULL, '#!markdown\n\n```php\n$m = ddy_model(\'db_name.collection_name\', \'mongo\'); //mongo为dns中配置的名称\n\n//查询\n$m->select($filter, $options);\n$m->selectOne($filter, $options);\n$m->selectCount($filter);\n//filter参数的格式除了可以写mongo原生的格式外, 还可以完全跟mysql model的相同, 内部会处理掉mysql和mongodb查询条件的差异\n\n//字段名后的修饰符用于标识用何种规则处理元数据, 支持 date, timestamp, regex\n//{\"create_at\":{\"$gte\":IOSDATE(\'2018-10-01\'),\"$lt\":IOSDATE(\'2018-11-01\')}}\n$m->select([\n	\'create_at|date\' => [\n		\'>=\' => \'2018-10-01\',\n		\'<\' => \'2018-11-01\'\n  	]\n], $options);\n\n//{\"create_at\":{\"$ge\":Timestamp(1412180887, 0)}}\n$m->select([\n	\'create_at|timestamp\' => [\n		\'>\' => time() - 12*60*60\n	]\n], $options);\n\n//{\"goods\":{\"$in\":[1,2,3]}}\n$m->select([\n	\'goods_id\' => [1,2,3]\n]);\n\n// options 目前支持 limit/offset, order_by 写法跟mysql model相同\n$options = [\n	\'limit\' => 10,\n	\'offset\' => 10,\n	\'order_by\' => \'filed desc\'\n];\n//{\"create_at\":{\"$gt\":{\"$date\":{\"$numberLong\":\"1543248000000\"}}}},\"sort\":{\"buyer\":1}\n$m->select([\n	\'create_at|date\' => [\n		\'>=\' => \'2018-10-01\',\n  	]\n], $options);\n```\n\n```$filter```为mongo查询条件，[查看文档](https://docs.mongodb.com/manual/core/document/#document-query-filter)\n\n\n[示例报表](https://ddy.mengtuiapp.com/#/report/239)', 1, NULL, 'default', '', '', '', '', '', '{\n	\"ignore_parse\" : true\n}', 0, 1, 1, '', 83, '2001-01-01 00:00:00', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (14, 'Chrome下报表显示下载按钮方法', 'report', '', 'none', 0, '#!markdown\n# 操作步骤\n1. 打开 chrome://settings/content/flash\n2. 禁止网站运行Flash -> 改为“先询问（推荐）”\n3. 允许->添加\n4. 添加网站->添加', 1, NULL, '#!markdown\n# 操作步骤\n1. 打开 chrome://settings/content/flash\n2. 禁止网站运行Flash -> 改为“先询问（推荐）”\n3. 允许->添加\n4. 添加网站->添加', 1, NULL, 'default', '', '', '', '', '', '', 0, 1, 1, '', 84, '2001-01-01 00:00:00', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (15, '表插件文档', 'report', '', 'none', 1, '#!markdown\n\n## 简介\n对整个表的数据做二次处理，例如：加合计列，平均列，表格倒置，单元格合并等\n表插件系统默认定义了几个通用的插件，见后续详情。\n用户自定义的表插件有两种方式：\n- 在业务方的插件目录中定义，一般定义固化的相关插件\n- 在报表代码中定义，一般定义临时的插件\n\n## 表插件的使用\n表插件的配置，有很多种途径，但本质上都是设置report数据中的options字段。\n表插件定义在`options`结构中，以`plugin_`或`plugin_delay_`做为前缀。\n`plugin_`和`plugin_delay_`前缀的区别在于执行的时间点，前者在列插件之前，后者在之后。\n（注意，delay是个语法，不是插件名称的一部分，插件定义时的名称，不需要写delay）\n\n- 在报表配置中配置，例：\n```\n{\n   \"table\" : {  //如一张报表有多个table, 又想每个table差异化配置，可以使用tables: { \"reportid\" : {...} } 配置\n       \"plugin_sum\" : {\"avg\":false, \"sum\":true}  \n	   \"plugin_flip\":true,\n	   ...\n   }\n}\n```\n\n- 在SQL中配置\n在SQL开头的注释中，通过注释语法定义，一行一个配置\n```sql\n-- @plugin_sum={\"avg\":false, \"sum\":true}\n-- @plugin_flip=true\n-- @invisible=true\nSELECT\n	a AS \'字段\'\nFROM t;\n```\n\n- 在代码中配置\n```php\nddy_set_page_data([\n	\"报表名\" => [\n		\"rows\" => [ ... ],\n		\"options\" => [\n			\"plugin_sum\" => [ \"avg\": false ],\n			...\n		]\n	]\n]);\n\n//注意该函数调用时间需要在SQL执行前，否则无效\nddy_set_table_options(\"报表名\", [\n	\"plugin_sum\" => [ \"avg\" : false ],\n	...\n]);\n```\n\n## 插件的定义\n```php\n//$config为传入的插件参数，$data为报表的查询参数\nfunction ddy_plugin_xxxx(&$report, $config, $data) {\n	foreach ($report[\'rows\'] as &$row) {\n		$row[\'新加一列\'] = \"xxx\";\n		unset($row);\n	}\n}\n```\n\n## 系统插件\n\n### plugin_sum 合计平均\n系统配置开启，插件的可配置项\n```\n{\n	\"sum\" : true, //显示合计行（默认true）\n	\"avg\" : false, //显示平均行（默认false）\n	\"avg_pk\" : \"列名\", //可选配置，计算平均数时，除以该列的行数（忽略空值及重复值）\n	\"group\" : \"列名1,列名2\", //可选配置，按指定列做组合计，通过和plugin_sort配置使用\n	\"ignore\" : \"列匹配正则\", //可手动指定忽略的列（系统会自动判别一列是否是数字列，但总有特别的，这时你可以手动指定忽略那些长的像数字，但并不适合合计统计的列）\n}\n```\n\n### plugin_flip 表格倒置\n```\n{\n	\"key\" : \"列1,列2\" //用于生成倒置表格的新标题, 或简化配置 -- @plugin_flip=\"列1,列2\"\n}\n```\n\n```\n月份 订单数 销售额 ..\n1月  10    100\n2月  20    200\n\nplugin_flip=\"月份\"\n\n名称    月份[1月] 月份[2月]\n订单数  10        20\n销售客  100       200\n```\n\n### plugin_sort 排序\n配置项示例\n```\n-新增用户数(来源>$),-日期\n```\n新增用户数和日期为列名，列名前缀的`+`,`-`表示升序或降序；\n`(来源>$)`为group定义，表示排序将后面指定的组做为一个整体，格式为`(列名1>列名2...>$)`最后一定以`$`结尾。\n\n### merge_cell 合并单元格\n连续的相同的行单元，会合并成一个大的单元格\n```\nmerge_cell=列名1,列名2...\n```\n\n`-- @invisible=true` 控制报表可见性', 1, '2024-03-15 16:11:15', '#!markdown\n\n## 简介\n对整个表的数据做二次处理，例如：加合计列，平均列，表格倒置，单元格合并等\n表插件系统默认定义了几个通用的插件，见后续详情。\n用户自定义的表插件有两种方式：\n- 在业务方的插件目录中定义，一般定义固化的相关插件\n- 在报表代码中定义，一般定义临时的插件\n\n## 表插件的使用\n表插件的配置，有很多种途径，但本质上都是设置report数据中的options字段。\n表插件定义在`options`结构中，以`plugin_`或`plugin_delay_`做为前缀。\n`plugin_`和`plugin_delay_`前缀的区别在于执行的时间点，前者在列插件之前，后者在之后。\n（注意，delay是个语法，不是插件名称的一部分，插件定义时的名称，不需要写delay）\n\n- 在报表配置中配置，例：\n```\n{\n   \"table\" : {  //如一张报表有多个table, 又想每个table差异化配置，可以使用tables: { \"reportid\" : {...} } 配置\n       \"plugin_sum\" : {\"avg\":false, \"sum\":true}  \n	   \"plugin_flip\":true,\n	   ...\n   }\n}\n```\n\n- 在SQL中配置\n在SQL开头的注释中，通过注释语法定义，一行一个配置\n```sql\n-- @plugin_sum={\"avg\":false, \"sum\":true}\n-- @plugin_flip=true\nSELECT\n	a AS \'字段\'\nFROM t;\n```\n\n- 在代码中配置\n```php\nddy_set_page_data([\n	\"报表名\" => [\n		\"rows\" => [ ... ],\n		\"options\" => [\n			\"plugin_sum\" => [ \"avg\": false ],\n			...\n		]\n	]\n]);\n\n//注意该函数调用时间需要在SQL执行前，否则无效\nddy_set_table_options(\"报表名\", [\n	\"plugin_sum\" => [ \"avg\" : false ],\n	...\n]);\n```\n\n## 插件的定义\n```php\n//$config为传入的插件参数，$data为报表的查询参数\nfunction ddy_plugin_xxxx(&$report, $config, $data) {\n	foreach ($report[\'rows\'] as &$row) {\n		$row[\'新加一列\'] = \"xxx\";\n		unset($row);\n	}\n}\n```\n\n## 系统插件\n\n### plugin_sum 合计平均\n系统配置开启，插件的可配置项\n```\n{\n	\"sum\" : true, //显示合计行（默认true）\n	\"avg\" : false, //显示平均行（默认false）\n	\"avg_pk\" : \"列名\", //可选配置，计算平均数时，除以该列的行数（忽略空值及重复值）\n	\"group\" : \"列名1,列名2\", //可选配置，按指定列做组合计，通过和plugin_sort配置使用\n	\"ignore\" : \"列匹配正则\", //可手动指定忽略的列（系统会自动判别一列是否是数字列，但总有特别的，这时你可以手动指定忽略那些长的像数字，但并不适合合计统计的列）\n}\n```\n\n### plugin_flip 表格倒置\n```\n{\n	\"key\" : \"列1,列2\" //用于生成倒置表格的新标题, 或简化配置 -- @plugin_flip=\"列1,列2\"\n}\n```\n\n```\n月份 订单数 销售额 ..\n1月  10    100\n2月  20    200\n\nplugin_flip=\"月份\"\n\n名称    月份[1月] 月份[2月]\n订单数  10        20\n销售客  100       200\n```\n\n### plugin_sort 排序\n配置项示例\n```\n-新增用户数(来源>$),-日期\n```\n新增用户数和日期为列名，列名前缀的`+`,`-`表示升序或降序；\n`(来源>$)`为group定义，表示排序将后面指定的组做为一个整体，格式为`(列名1>列名2...>$)`最后一定以`$`结尾。\n\n### merge_cell 合并单元格\n连续的相同的行单元，会合并成一个大的单元格\n```\nmerge_cell=列名1,列名2...\n```\n', 1, NULL, 'default', '', '', '', '', '', '', 0, 1, 1, '', 86, '2001-01-01 00:00:00', '2024-03-15 08:11:15');
INSERT INTO `menuitem` VALUES (16, '列插件文档', 'report', '', 'none', 0, '#!markdown\n\n## 简介\n对某一列的数据做二次处理\n表插件系统默认定义了几个通用的插件，见后续详情。\n用户自定义的表插件有两种方式：\n- 在业务方的插件目录中定义，一般定义固化的相关插件，方法名格式：`filed_插件名`\n- 在报表代码中定义，一般定义临时的插件\n\n## 列插件的使用\n列插件的配置，有很多种途径，但本质上都是设置report数据中的options字段。\n列插件定义在`options.fields`结构中，可以使用任意字母数字组成的名称，未定义的列插件，会视为列的属性看待，除了几种系统属性，其它属性都为HTML的标签属性。\n\n- 在报表配置中配置，例：\n```\n{\n   \"table\" : {  //如一张报表有多个table, 又想每个table差异化配置，可以使用tables: { \"reportid\" : {...} } 配置\n       \"fields\" : {\n	       \"列名\" : {\n		       \"href\" : \"/#/report/100?query=xxx&id={可引用用行的其它列的值}\", //HTML属性\n			   \"nan\" : TRUE, //设置非数字属性，强制不按数字格式化\n			   \"rule\" : \"{列1}/{列2}*100\", //指定该列的计算公工，可通过{xx}引用同行其它列的值\n			   \"ratio\" : 100, //系统插件，计算比率，当前值/配置的分母（默认是100，即设置为true时）\n			   \"time2str\" : \"Y-m-d\", //系统插件，时间截转为时间字符串，配置值为格式串Y-m-d H:i:s\n			   \"plugin_name\" : {...}, //自定义插件\n		   }\n	   }\n	   ...\n   }\n}\n```\n\n- 在SQL中配置\n使用SQL注释配置，SQL书写要遵守一定的格式。\n即SELECT中的每一列需要单独一行，且需要有`AS`语法，注释格式为`-- @....`\n列配置是一个JSON形式的数据 ，如果只有一个rule的定义，{\"rule\":\"xxx\"}，可以使用rule的简写配置，见下列示例。\n\n```sql\nSELECT\n	date AS \'日期\' -- @{\"week_day\":true} //自定义插件\n	pv AS \'曝光\', -- @{\"style\":\"color:red\"} //通过HTML属性标红该列\n	click AS \'点击\', \n	click/pv*100 AS \'点击率\', -- @{点击}/{曝光}*100   //等价为{\"rule\":\"{点击}/{曝光}*100\"}，此处之所有要配置rule，主要是给plugin_sum插件计算使用，用于正确计算该列的合计值\nFROM report;\n```\n\n## 插件的定义\n```php\n//参数 ：\n//$config_value为传入的插件参数\n//$value为当前单元格的值\n//$field为当前单元格的列名\n//$i为当前单元格的行号（从0开始）\n//$row为当前行的数据 \n//$report,整个表格报表的数据 \n//返回值：string|array\n//返回一个非数组值，则表示用该返回值规则 当前单元格的值，等价于 [ \"value\" => \"...\" ]\n//返回一个数组，则表示设置该单元格的属性，value为特殊属性，即为当前单元格的值\nfunction ddy_field_week_day($config_value, $value, $field, $i, $row, $report) {\n	return date(\'w\', strtotime($value));\n}\n```\n\n', 1, NULL, '#!markdown\n\n## 简介\n对某一列的数据做二次处理\n表插件系统默认定义了几个通用的插件，见后续详情。\n用户自定义的表插件有两种方式：\n- 在业务方的插件目录中定义，一般定义固化的相关插件，方法名格式：`filed_插件名`\n- 在报表代码中定义，一般定义临时的插件\n\n## 列插件的使用\n列插件的配置，有很多种途径，但本质上都是设置report数据中的options字段。\n列插件定义在`options.fields`结构中，可以使用任意字母数字组成的名称，未定义的列插件，会视为列的属性看待，除了几种系统属性，其它属性都为HTML的标签属性。\n\n- 在报表配置中配置，例：\n```\n{\n   \"table\" : {  //如一张报表有多个table, 又想每个table差异化配置，可以使用tables: { \"reportid\" : {...} } 配置\n       \"fields\" : {\n	       \"列名\" : {\n		       \"href\" : \"/#/report/100?query=xxx&id={可引用用行的其它列的值}\", //HTML属性\n			   \"nan\" : TRUE, //设置非数字属性，强制不按数字格式化\n			   \"rule\" : \"{列1}/{列2}*100\", //指定该列的计算公工，可通过{xx}引用同行其它列的值\n			   \"ratio\" : 100, //系统插件，计算比率，当前值/配置的分母（默认是100，即设置为true时）\n			   \"time2str\" : \"Y-m-d\", //系统插件，时间截转为时间字符串，配置值为格式串Y-m-d H:i:s\n			   \"plugin_name\" : {...}, //自定义插件\n		   }\n	   }\n	   ...\n   }\n}\n```\n\n- 在SQL中配置\n使用SQL注释配置，SQL书写要遵守一定的格式。\n即SELECT中的每一列需要单独一行，且需要有`AS`语法，注释格式为`-- @....`\n列配置是一个JSON形式的数据 ，如果只有一个rule的定义，{\"rule\":\"xxx\"}，可以使用rule的简写配置，见下列示例。\n\n```sql\nSELECT\n	date AS \'日期\' -- @{\"week_day\":true} //自定义插件\n	pv AS \'曝光\', -- @{\"style\":\"color:red\"} //通过HTML属性标红该列\n	click AS \'点击\', \n	click/pv*100 AS \'点击率\', -- @{点击}/{曝光}*100   //等价为{\"rule\":\"{点击}/{曝光}*100\"}，此处之所有要配置rule，主要是给plugin_sum插件计算使用，用于正确计算该列的合计值\nFROM report;\n```\n\n## 插件的定义\n```php\n//参数 ：\n//$config_value为传入的插件参数\n//$value为当前单元格的值\n//$field为当前单元格的列名\n//$i为当前单元格的行号（从0开始）\n//$row为当前行的数据 \n//$report,整个表格报表的数据 \n//返回值：string|array\n//返回一个非数组值，则表示用该返回值规则 当前单元格的值，等价于 [ \"value\" => \"...\" ]\n//返回一个数组，则表示设置该单元格的属性，value为特殊属性，即为当前单元格的值\nfunction ddy_field_week_day($config_value, $value, $field, $i, $row, $report) {\n	return date(\'w\', strtotime($value));\n}\n```\n\n', 1, NULL, 'default', '', '', '', '', '', '', 0, 1, 1, '', 85, '2001-01-01 00:00:00', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (17, '第三方平台内嵌报表', 'report', '', 'none', 2, '#!markdown\n\n# 说明\n本文档介绍如何将报表嵌入第三方平台中\n\n# 步骤\n1. 管理员进行可信服务配置\n2. 第三方平台按如下示例进行报表嵌入\n\n```\n\nfunction ddy_render_mengtui_report($report_id, $width = 1300, $height = 827)\n{\n	/*\n	 *  api: https://ddy.mengtuiapp.com/dataddy/getTrustTicket?user=qttwlx&client_ip=58.247.129.10\n	 *  user为配置的可信站点中配置的用户名，ticket可以用访问访用户下的所有报表\n	 *  client_ip为客户端请求的ip, ticket使用时会校验客户端的ip是否一致\n	 *\n	 *  response:\n	{\n	  \"code\": 0,\n	  \"message\": \"ok\",\n	  \"data\": \"e3f7315153a12c158f7b546d835a01a6\"  //ticket\n	}\n	 */\n	//$ticket = ddy_get_trust_ticket_from_mengtui();\n	\n	if (!$ticket) {\n		echo \"xxx\";\n		return;\n	}\n	echo \'\n	<iframe frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" allowtransparency=\"true\" allowfullscreen=\"true\" class=\"tableauViz\" width=\"$width\" height=\"$height\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: {$width}px; height: {$height}px;\" src=\"https://ddy.mengtuiapp.com/report/{$report_id}?ticket={$ticket}\"></iframe>\n\';\n}\nddy_render_mengtui_report(479);\n```', 1, '2019-08-24 01:12:36', '#!markdown\n\n# 说明\n本文档介绍如何将报表嵌入第三方平台中\n\n# 步骤\n1. 管理员进行可信服务配置\n2. 第三方平台按如下示例进行报表嵌入\n\n```\n\nfunction ddy_render_mengtui_report($report_id, $width = 1300, $height = 827)\n{\n	/*\n	 *  api: https://ddy.mengtuiapp.com/dataddy/getTrustTicket?user=qttwlx&client_ip=58.247.129.10\n	 *  user为配置的可信站点中配置的用户名，ticket可以用访问访用户下的所有报表\n	 *  client_ip为客户端请求的ip, ticket使用时会校验客户端的ip是否一致\n	 *\n	 *  response:\n	{\n	  \"code\": 0,\n	  \"message\": \"ok\",\n	  \"data\": \"e3f7315153a12c158f7b546d835a01a6\"  //ticket\n	}\n	 */\n	//$ticket = ddy_get_trust_ticket_from_mengtui();\n	\n	if (!$ticket) {\n		echo \"xxx\";\n		return;\n	}\n	echo \'\n	<iframe frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" allowtransparency=\"true\" allowfullscreen=\"true\" class=\"tableauViz\" width=\"$width\" height=\"$height\" style=\"display: block; margin: 0px; padding: 0px; border: none; width: {$width}px; height: {$height}px;\" src=\"https://ddy.mengtuiapp.com/report/{$report_id}?ticket={$ticket}\"></iframe>\n\';\n}\nddy_render_mengtui_report(479);\n```', 1, '2019-08-24 01:12:36', 'default', '', '', '', '', '', '', 0, 1, 1, '', 88, '2019-08-24 00:43:49', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (18, '宏变量介绍', 'report', '', 'none', 2, '#!markdown\n\n## 什么是宏变量\n在SQL模板中形如`{xxx}`的高亮元素, 如下\n```\nSELECT\n	date AS \'日期\', -- {?by_date}  by_date一般通过bool类型控件定义，此处用于控制是否输出当前行\n	SUM(cost) AS \'成本\'\nFROM {cost}   -- cost宏一般在全局宏配置中定义\nWHERE\n	date >= {from_date} AND date <= {to_date}  -- 查询条件宏，一般在查询控制中定义\nGROUP BY `日期` -- {?by_date} by_date一般通过bool类型控件定义，此处用于控制是否输出当前行\n;\n```\n\n## 宏定义方式\n\n- 在系统配置中的全局宏配置中定义，所有报表都能直接引用到；都为非转义宏。\n- 报表中查询控件产生的查询条件宏，一般在控件属性中定义macro属性产生；默认为转义宏，可通过配置属性raw强制不转义。\n- 报表中通过函数（ddy_macro）定义，通过第三参数控制是否转义\n\n> 转义是指将宏的内容当做字符串值，用引号括起；不转义一般是将宏内容做为数字或是SQL语法的包含内容。\n\n一般宏定义\n```\nddy_macro(\'name\', \'content\', $escape);\n```\n\n通过`{name}`引用宏内容，通过`{?name}`, `{?!name}`, `{3?name}` ... 等输出控制语法控制内容\n\n\n### LAMDA宏\n动态表达式宏，在引用的时候，根据传入的参数，返回相应的宏值\n\n```\n// lamda 语法:\n// default_param1,default_param2... => 宏内容，通用{1}引用第1个参数...\nddy_macro(\'add_30_then_plus_n\', \'0,1 => ({0} + 30)*{2}\', false);\n```\n\nLAMDA宏引用\n```\nSELECT\n	{add_30_then_plus_n}, -- 使用默认值\n	{add_30_then_plus_n[10,2]} -- 传参引用\n```\n', 1, '2019-11-21 11:51:43', '#!markdown\n\n## 什么是宏变量\n在SQL模板中形如`{xxx}`的高亮元素, 如下\n```\nSELECT\n	date AS \'日期\', -- {?by_date}  by_date一般通过bool类型控件定义，此处用于控制是否输出当前行\n	SUM(cost) AS \'成本\'\nFROM {cost}   -- cost宏一般在全局宏配置中定义\nWHERE\n	date >= {from_date} AND date <= {to_date}  -- 查询条件宏，一般在查询控制中定义\nGROUP BY `日期` -- {?by_date} by_date一般通过bool类型控件定义，此处用于控制是否输出当前行\n;\n```\n\n## 宏定义方式\n\n- 在系统配置中的全局宏配置中定义，所有报表都能直接引用到；都为非转义宏。\n- 报表中查询控件产生的查询条件宏，一般在控件属性中定义macro属性产生；默认为转义宏，可通过配置属性raw强制不转义。\n- 报表中通过函数（ddy_macro）定义，通过第三参数控制是否转义\n\n> 转义是指将宏的内容当做字符串值，用引号括起；不转义一般是将宏内容做为数字或是SQL语法的包含内容。\n\n一般宏定义\n```\nddy_macro(\'name\', \'content\', $escape);\n```\n\n通过`{name}`引用宏内容，通过`{?name}`, `{?!name}`, `{3?name}` ... 等输出控制语法控制内容\n\n\n### LAMDA宏\n动态表达式宏，在引用的时候，根据传入的参数，返回相应的宏值\n\n```\n// lamda 语法:\n// default_param1,default_param2... => 宏内容，通用{1}引用第1个参数...\nddy_macro(\'add_30_then_plus_n\', \'0,1 => ({0} + 30)*{2}\', false);\n```\n\nLAMDA宏引用\n```\nSELECT\n	{add_30_then_plus_n}, -- 使用默认值\n	{add_30_then_plus_n[10,2]} -- 传参引用\n```\n', 1, '2019-11-21 11:51:43', 'default', '', '', '', '', '', '', 0, 1, 1, '', 87, '2019-11-21 11:26:25', '2024-01-30 05:55:18');
INSERT INTO `menuitem` VALUES (19, '可视化图表配置', 'report', '', 'none', 2, '#!markdown\n\n可视化图表使用Amcharts 3.1版本, 文档：https://www.amcharts.com/docs/v3/reference/tag/javascript-charts/\n数据源默认从表格中解析，第一列默认为x轴。\n\n\n## 简易曲线图配置：\n```\n{\n  \"chart\" : \"列名1,列名2\"  //指定数据来源列\n}\n```\n\n## 复杂配置：\n\ngraph配置文档： https://www.amcharts.com/docs/v3/reference/amgraph/\n\n```\n{\n	\"chart\" : {\n		\"graphs\" : [\n			{\n				\"valueField\" : \"列名1\",\n				\"title\" : \"xx\",\n				\"type\" : \"line\",\n				\"dashLength\" : 2\n			}\n		]\n	}\n}\n```\n', 1, '2019-11-25 22:34:54', '#!markdown\n\n可视化图表使用Amcharts 3.1版本, 文档：https://www.amcharts.com/docs/v3/reference/tag/javascript-charts/\n数据源默认从表格中解析，第一列默认为x轴。\n\n\n## 简易曲线图配置：\n```\n{\n  \"chart\" : \"列名1,列名2\"  //指定数据来源列\n}\n```\n\n## 复杂配置：\n\ngraph配置文档： https://www.amcharts.com/docs/v3/reference/amgraph/\n\n```\n{\n	\"chart\" : {\n		\"graphs\" : [\n			{\n				\"valueField\" : \"列名1\",\n				\"title\" : \"xx\",\n				\"type\" : \"line\",\n				\"dashLength\" : 2\n			}\n		]\n	}\n}\n```\n', 1, '2019-11-25 22:34:54', 'default', '', '', '', '', '', '', 0, 1, 1, '', 82, '2019-11-25 22:27:23', '2024-01-30 05:55:18');
COMMIT;

-- ----------------------------
-- Table structure for plugin
-- ----------------------------
DROP TABLE IF EXISTS `plugin`;
CREATE TABLE `plugin` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '插件名称',
  `type` enum('sso','filter','none') NOT NULL DEFAULT 'none' COMMENT '插件类型',
  `author` varchar(50) NOT NULL DEFAULT '' COMMENT '作者',
  `bundle_id` varchar(128) NOT NULL,
  `version` varchar(15) NOT NULL DEFAULT '' COMMENT '版本号',
  `scope` varchar(50) NOT NULL DEFAULT 'report',
  `enable` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否启用',
  `email` varchar(50) NOT NULL DEFAULT '' COMMENT '邮件',
  `content` text,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_unique_bundle_id` (`bundle_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for role
-- ----------------------------
DROP TABLE IF EXISTS `role`;
CREATE TABLE `role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL,
  `parent_id` int(11) NOT NULL DEFAULT '0',
  `resource` text COMMENT '拥有资源的访问权限',
  `config` text COMMENT '其它配置',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COMMENT='角色定义';

-- ----------------------------
-- Records of role
-- ----------------------------
BEGIN;
INSERT INTO `role` VALUES (1, '管理员', 0, NULL, NULL);
INSERT INTO `role` VALUES (2, '产品', 1, '{\"13\":\"rR\"}', NULL);
INSERT INTO `role` VALUES (3, '开发者', 1, '{}', '{\n    \"permission\":{\n        \"report\": \"rwR\",\n		\"menu\": \"rwR\"\n    }\n}');
COMMIT;

-- ----------------------------
-- Table structure for sql_log
-- ----------------------------
DROP TABLE IF EXISTS `sql_log`;
CREATE TABLE `sql_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `report_id` int(11) NOT NULL DEFAULT '0',
  `uid` int(11) NOT NULL DEFAULT '0',
  `nick` varchar(255) NOT NULL DEFAULT '',
  `dsn` varchar(255) NOT NULL DEFAULT '',
  `sql_content` text,
  `start_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `end_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `use_time` int(11) NOT NULL DEFAULT '0',
  `status` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
-- ----------------------------
-- Table structure for statistic
-- ----------------------------
DROP TABLE IF EXISTS `statistic`;
CREATE TABLE `statistic` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `page_url` varchar(1024) NOT NULL,
  `page_name` varchar(50) NOT NULL DEFAULT '',
  `start_time` timestamp NULL DEFAULT NULL,
  `end_time` timestamp NULL DEFAULT NULL,
  `use_time` float NOT NULL,
  `access_user` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='报表访问统计';

-- ----------------------------
-- Table structure for trust_ticket
-- ----------------------------
DROP TABLE IF EXISTS `trust_ticket`;
CREATE TABLE `trust_ticket` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `server` varchar(20) NOT NULL,
  `ticket` varchar(32) NOT NULL,
  `expire_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `client_ip` varchar(20) DEFAULT NULL,
  `username` varchar(50) NOT NULL,
  `uid` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ticket` (`ticket`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='授权给第三方的Ticket';

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(64) NOT NULL,
  `password` varchar(128) NOT NULL,
  `nick` varchar(32) NOT NULL,
  `roles` varchar(100) NOT NULL DEFAULT '',
  `is_admin` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否为管理员',
  `last_login_time` timestamp NULL DEFAULT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `mobile` varchar(50) DEFAULT NULL,
  `theme` varchar(1024) NOT NULL DEFAULT '',
  `avatar_small` varchar(255) NOT NULL DEFAULT '',
  `config` text,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT='用户';

-- ----------------------------
-- Records of user
-- ----------------------------
BEGIN;
INSERT INTO `user` VALUES (1, 'dataddy', '$2y$12$IaoZBuUni5Tt70CBny/t8uY/jT.Bb5MDZR.xHOM2VKedpPk.oWcSC', '管理员', '1', 1, '2024-08-13 06:26:04', NULL, NULL, NULL, '', '', NULL);
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
